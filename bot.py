import os
import base64
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv
import asyncio
from openai import AsyncOpenAI

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
registered_users: set[int] = set()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])

async def start_handler(message: types.Message):
    user = message.from_user

    if user.id not in registered_users:
        registered_users.add(user.id)
        text = (
            "üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n"
            f"üë§ –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ Username: @{user.username if user.username else '‚Äî'}\n"
            f"üåç –Ø–∑—ã–∫: {user.language_code or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
        )
        await bot.send_message(chat_id=ADMIN_ID, text=text)

    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ò–ò-–±–æ—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –º–∞—Ç—á–µ–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äî –∏ —è –¥–∞–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–∫ —Å—Ç–∞—Ç—å—è, —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º. ‚öΩüìäüî•"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω–∞
@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def handle_input(message: types.Message):
    await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –º–æ—â–Ω—ã–π —Ä–∞–∑–±–æ—Ä üëá")

    user_text = (message.caption or message.text or "").strip()
    user_content = []

    if user_text:
        user_content.append({"type": "text", "text": (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –º–∞—Ç—á: \"{user_text}\".\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ–≥–æ –∫–∞–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –°–¥–µ–ª–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç—å—é —Å:\n"
            f"1. –ò–Ω—Ç—Ä–æ ‚Äî –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç, –∫–æ–≥–¥–∞, —Ç—É—Ä–Ω–∏—Ä\n"
            f"2. –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞ –æ–±–µ–∏—Ö –∫–æ–º–∞–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä)\n"
            f"3. –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–±–æ—Ä, H2H, –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
            f"4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–∞–≤–µ, —Ç—Ä–∞–≤–º–∞—Ö, —Å—Ç–∏–ª–µ –∏–≥—Ä—ã\n"
            f"5. –ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ª–∏–Ω–∏—è (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ) ‚Äî –∫—Ç–æ —Ñ–∞–≤–æ—Ä–∏—Ç\n"
            f"6. üí° –°—Ñ–æ—Ä–º–∏—Ä—É–π –º–Ω–µ–Ω–∏–µ: –∫–æ–≥–æ –±—ã —Ç—ã –ø–æ–¥–¥–µ—Ä–∂–∞–ª\n"
            f"7. –î–∞–π —Å–≤–æ–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∏—Å—Ö–æ–¥ ‚Äî —á—ë—Ç–∫–æ: –ü1, –¢–ë 2.5, –•2 –∏ —Ç.–ø.\n"
            f"8. –ó–∞–≤–µ—Ä—à–∏ —Å—Ç–∞—Ç—å—é –≤—ã–≤–æ–¥–æ–º –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º –æ —Ä–∏—Å–∫–∞—Ö\n\n"
            f"–î–æ–±–∞–≤–ª—è–π ‚öΩÔ∏èüìäüî• –≥–¥–µ –Ω—É–∂–Ω–æ. –ü–∏—à–∏ –∫–∞–∫ –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –±–ª–æ–≥–∞ –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–∏."
        )})

    if message.photo:
        photo = message.photo[-1]
        buffer = BytesIO()
        await photo.download(destination=buffer)
        buffer.seek(0)
        img_b64 = base64.b64encode(buffer.read()).decode()
        user_content.append({
            "type": "image_url",
            "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}
        })

    messages = [
        {
            "role": "system",
            "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –∂–∏–≤—ã–º —Å—Ç–∏–ª–µ–º. –ü–∏—à–∏ –∫–∞–∫ –¥–ª—è –±–ª–æ–≥–∞: –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π, –Ω–µ –º—è–º–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã, —Å—Ç—Ä–æ–π–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –î–∞–π —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ."
        },
        {
            "role": "user",
            "content": user_content
        }
    ]

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=1.3,
            max_tokens=2000
        )
        result = response.choices[0].message.content
        await message.answer(result)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –ò–ò.")
        await message.answer(f"üìõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        print("OpenAI error:", e)

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        loop.run_until_complete(bot.session.close())
        loop.run_until_complete(client.aclose())
        loop.close()
