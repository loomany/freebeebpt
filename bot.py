import os
import base64
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv
from openai import OpenAI

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
client = OpenAI(api_key=OPENAI_API_KEY)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_ID = 200082134

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
registered_users: set[int] = set()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])

async def start_handler(message: types.Message):
    user = message.from_user

    if user.id not in registered_users:
        registered_users.add(user.id)
        text = (
            "üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n"
            f"üë§ –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ Username: @{user.username if user.username else '‚Äî'}\n"
            f"üåç –Ø–∑—ã–∫: {user.language_code or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
        )
        await bot.send_message(chat_id=ADMIN_ID, text=text)

    await message.answer(
        "ü§ñ –¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ò–ò-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –ª—é–±–æ–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Å–∫—Ä–∏–Ω —Å –º–∞—Ç—á–µ–º, –∏ —è –∑–∞–ø—É—â—É –∞–Ω–∞–ª–∏–∑ –æ—Ç –∏–º–µ–Ω–∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞."
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω–∞
@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def handle_input(message: types.Message):
    await message.answer("üß† –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")

    user_text = (message.caption or message.text or "").strip()
    user_content = []

    if user_text:
        user_content.append({"type": "text", "text": user_text})

    if message.photo:
        photo = message.photo[-1]
        buffer = BytesIO()
        await photo.download(destination=buffer)
        buffer.seek(0)
        img_b64 = base64.b64encode(buffer.read()).decode()
        user_content.append({
            "type": "image_url",
            "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}
        })

    messages = [
        {
            "role": "system",
            "content": "–¢—ã —á–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –≥–ª—É–±–æ–∫–∏–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Ñ—É—Ç–±–æ–ª–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ —Ñ–æ—Ä–º—ã –∫–æ–º–∞–Ω–¥. –ù–µ –ø–∏—à–∏ —á—É—à—å."
        },
        {
            "role": "user",
            "content": user_content
        }
    ]

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=1.0,
            max_tokens=800
        )
        result = response.choices[0].message.content
        await message.answer(result)

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –ò–ò.")
        await message.answer(f"üìõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        print("OpenAI error:", e)

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
