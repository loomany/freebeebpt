import os
import base64
from io import BytesIO
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from dotenv import load_dotenv
import asyncio
from openai import AsyncOpenAI

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
registered_users: set[int] = set()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
@dp.message_handler(commands=["start"])

async def start_handler(message: types.Message):
    user = message.from_user

    if user.id not in registered_users:
        registered_users.add(user.id)
        text = (
            "üì• –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!\n\n"
            f"üë§ –ò–º—è: {user.first_name or ''} {user.last_name or ''}\n"
            f"üÜî ID: {user.id}\n"
            f"üí¨ Username: @{user.username if user.username else '‚Äî'}\n"
            f"üåç –Ø–∑—ã–∫: {user.language_code or '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}"
        )
        await bot.send_message(chat_id=ADMIN_ID, text=text)

    await message.answer(
        "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ò–ò-–±–æ—Ç –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ —Ä–∞–∑–±–æ—Ä–∞ –º–∞—Ç—á–µ–π.\n"
        "–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç ‚Äî –∏ —è –¥–∞–º —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞–∫ —Å—Ç–∞—Ç—å—è, —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º. ‚öΩüìäüî•"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω–∞
@dp.message_handler(content_types=[types.ContentType.TEXT, types.ContentType.PHOTO])
async def handle_input(message: types.Message):
    await message.answer("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é... –°–µ–π—á–∞—Å –±—É–¥–µ—Ç –º–æ—â–Ω—ã–π —Ä–∞–∑–±–æ—Ä üëá")

    user_text = (message.caption or message.text or "").strip()
    user_content = []

    if user_text:
        user_content.append({"type": "text", "text": (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª –º–∞—Ç—á: \"{user_text}\".\n\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–∞—Ç—á –∫–∞–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –æ–ø—ã—Ç–æ–º —Å—Ç–∞–≤–æ–∫. –°–æ—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ä–∞–∑–±–æ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç–∞—Ç—å–∏:\n\n"
            f"1. –í–≤–µ–¥–µ–Ω–∏–µ: –∫—Ç–æ –∏–≥—Ä–∞–µ—Ç, —Ç—É—Ä–Ω–∏—Ä, –¥–∞—Ç–∞\n"
            f"2. –§–æ—Ä–º–∞ –∫–æ–º–∞–Ω–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∏–≥—Ä, —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å—Ç–∏–ª—å –∏–≥—Ä—ã\n"
            f"3. –û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏, –º–æ—Ç–∏–≤–∞—Ü–∏—è, —Å–æ—Å—Ç–∞–≤—ã, —Ç—Ä–µ–Ω–µ—Ä—ã\n"
            f"4. –ß—Ç–æ –≤–∏–¥–Ω–æ –ø–æ –ª–∏–Ω–∏–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º (–µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–æ)\n"
            f"5. –°—Ñ–æ—Ä–º–∏—Ä—É–π –º–Ω–µ–Ω–∏–µ, –∫—Ç–æ —Å–∏–ª—å–Ω–µ–µ\n"
            f"6. üí¨ –ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏ **–æ–¥–Ω—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–∞–≤–∫—É**, –∫–æ—Ç–æ—Ä—É—é —Ç—ã –±—ã —Å–¥–µ–ª–∞–ª —Å–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¢–æ—Ç–∞–ª –ë–æ–ª—å—à–µ 2.5, –ü1, –ò–¢–ë1 1.5, –û–ó, X2 –∏ —Ç.–¥.)\n"
            f"7. –£–∫–∞–∂–∏ **–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç**, –µ—Å–ª–∏ –≤–∏–¥–∏—à—å –µ–≥–æ –Ω–∞ —Å–∫—Ä–∏–Ω–µ, –∏–ª–∏ –æ—Ü–µ–Ω–∏ —Å–∞–º\n"
            f"8. –ê—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π, –ø–æ—á–µ–º—É –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ —ç—Ç—É —Å—Ç–∞–≤–∫—É\n"
            f"9. –ó–∞–≤–µ—Ä—à–∏ –≤—ã–≤–æ–¥–æ–º: —Ç–≤–æ–π –ø–æ–¥—Ö–æ–¥, —Ä–∏—Å–∫, –∏ –ø–æ—á–µ–º—É —ç—Ç–∞ —Å—Ç–∞–≤–∫–∞ –ª–æ–≥–∏—á–Ω–∞\n\n"
            f"–°—Ç–∏–ª—å ‚Äî –∫–∞–∫ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –±–ª–æ–≥–µ—Ä —Å –æ–ø—ã—Ç–æ–º —Å—Ç–∞–≤–æ–∫: —á–µ—Å—Ç–Ω–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, –ø–æ –¥–µ–ª—É. –î–æ–±–∞–≤—å ‚öΩÔ∏èüî•üìä."
        )})

    if message.photo:
        photo = message.photo[-1]
        buffer = BytesIO()
        await photo.download(destination=buffer)
        buffer.seek(0)
        img_b64 = base64.b64encode(buffer.read()).decode()
        user_content.append({
            "type": "image_url",
            "image_url": {"url": f"data:image/jpeg;base64,{img_b64}"}
        })

    messages = [
        {
            "role": "system",
            "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫ —Å –∂–∏–≤—ã–º —Å—Ç–∏–ª–µ–º. –ü–∏—à–∏ –∫–∞–∫ –¥–ª—è –±–ª–æ–≥–∞: –∞—Ä–≥—É–º–µ–Ω—Ç–∏—Ä—É–π, –Ω–µ –º—è–º–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–∫—Ç—ã, —Å—Ç—Ä–æ–π–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É. –î–∞–π —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ."
        },
        {
            "role": "user",
            "content": user_content
        }
    ]

    try:
        response = await client.chat.completions.create(
            model="gpt-4o",
            messages=messages,
            temperature=1.3,
            max_tokens=2000
        )
        result = response.choices[0].message.content
        await message.answer(result)

        cashback_text = (
            "üíº *–ö–∞–∫ –ø–æ–ø–æ–ª–Ω—è—Ç—å —Å—á—ë—Ç —Å –≤—ã–≥–æ–¥–æ–π?*\n\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –≤ —Å–≤–æ—ë–º –±—É–∫–º–µ–∫–µ—Ä—Å–∫–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ ‚Äî *–±–µ–∑–æ–ø–∞—Å–Ω–æ –∏ —Å –∫–µ—à–±—ç–∫–æ–º* üí∏\n\n"
            "–°–µ—Ä–≤–∏—Å **Paydala & Freebee** —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:\n\n"
            "‚Ä¢ Olimpbet  \n"
            "‚Ä¢ 1xBet  \n"
            "‚Ä¢ Parimatch  \n"
            "‚Ä¢ Fonbet  \n\n"
            "üîí *100% –ª–µ–≥–∞–ª—å–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*  \n"
            "üí∏ –ö–µ—à–±—ç–∫ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –ª–æ–≥–∏–Ω\n\n"
            "üìé –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏, –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, —Å—Ö–µ–º—ã –∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –Ω–æ–º–µ—Ä\n\n"
            "üì≤ –ù–∞–∂–º–∏ –Ω–∏–∂–µ, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å ‚Äî –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–±—ç–∫"
        )

        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(
            types.InlineKeyboardButton(
                "üí¨ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ",
                url="https://t.me/freebee_admin",
            )
        )

        await message.answer(cashback_text, reply_markup=keyboard, parse_mode="Markdown")

    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ—Ç –ò–ò.")
        await message.answer(f"üìõ –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {str(e)}")
        print("OpenAI error:", e)

# –°—Ç–∞—Ä—Ç
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    try:
        executor.start_polling(dp, skip_updates=True)
    finally:
        loop.run_until_complete(bot.session.close())
        loop.run_until_complete(client.aclose())
        loop.close()
